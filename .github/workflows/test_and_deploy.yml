# This workflows will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

name: tests

on:
  push:
    branches:
      - main
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    defaults:
      run:
        shell: bash -l {0} # for setup-miniconda

    name: ${{ matrix.platform }} py${{ matrix.python-version }}
    runs-on: ${{ matrix.platform }}
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # note: if you need dependencies from conda, considering using
      # setup-miniconda: https://github.com/conda-incubator/setup-miniconda
      # and
      # tox-conda: https://github.com/tox-dev/tox-conda

      - name: Get mamba - ${{ matrix.python-version }}
        uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: ${{ matrix.python-version }}
          miniforge-version: latest
          activate-environment: test
          use-mamba: true

      - name: Initialize conda
        run: mamba init bash

      - name: Install dependencies with pip
        shell: bash -el {0}
        run: |
          mamba activate test
          python -m pip install --upgrade pip
          python -m pip install setuptools tox tox-conda tox-gh-actions

      # these libraries enable testing on Qt on linux
      - name: Enable testing on Qt on Linux
        uses: tlambert03/setup-qt-libs@v1

      # strategy borrowed from vispy for installing opengl libs on windows
      - name: Install Windows OpenGL
        if: runner.os == 'Windows'
        run: |
          git clone --depth 1 https://github.com/pyvista/gl-ci-helpers.git
          powershell gl-ci-helpers/appveyor/install_opengl.ps1

      # Install OpenCL for macOS/linux
      - name: Install OpenCL Linux (pocl)
        if: matrix.platform == 'ubuntu-latest'
        shell: bash -el {0}
        run: |
          mamba activate test
          mamba install -y pocl pyopencl

      - name: Install OpenCL macOS (pocl)
        if: matrix.platform == 'macos-latest'
        shell: bash -el {0}
        run: |
          mamba activate test
          mamba install -y pocl pyopencl ocl_icd_wrapper_apple

      # Install OpenCL for Windows
      - name: Install OpenCL (oclgrind)
        if: matrix.platform == 'windows-latest'
        shell: bash -el {0}
        run: |
          mamba activate test
          mamba install -y oclgrind pyopencl

      - name: Check installations
        shell: bash -el {0}
        run: |
          mamba activate test
          mamba list
          python -m pip list

      - name: Verify OpenCL devices
        shell: bash -l {0}
        run: |
          mamba activate test
          python -c "import pyopencl as cl; print(cl.get_platforms())"

      - name: Test with tox
        uses: aganders3/headless-gui@v2
        with:
          shell: bash -el {0} # without this, windows cant find tox
          run: |
            mamba activate test
            python -m tox
        env:
          PLATFORM: ${{ matrix.platform }}
          PYTHON_VERSION: ${{ matrix.python-version }}
          PYVISTA_OFF_SCREEN: true

      - name: Coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false


  deploy:
    # this will run when you have tagged a commit, starting with "v*"
    # and requires that you have put your twine API key in your
    # github secrets (see readme for details)
    needs: [test]
    runs-on: ubuntu-latest
    if: contains(github.ref, 'tags')
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U setuptools setuptools_scm wheel twine build
      - name: Build and publish
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TWINE_API_KEY }}
        run: |
          git tag
          python -m build .
          twine upload dist/*
