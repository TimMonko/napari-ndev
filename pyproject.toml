[build-system]
requires = ["setuptools>=42.0.0", "wheel", "setuptools_scm"]
build-backend = "setuptools.build_meta"

[project]
name = "napari-ndev"
description = "napari widgets to (batch) process images from start to finish."
readme = "README.md"
authors = [
    { name = "Tim Monko", email = "timmonko@gmail.com" }
]
license = { text = "BSD-3-Clause" }
classifiers = [
    "Development Status :: 3 - Alpha",
    "Framework :: napari",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Image Processing",
    "Topic :: Scientific/Engineering :: Visualization",
    "Topic :: Software Development :: User Interfaces",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities"
]
requires-python = ">=3.9"
dependencies = [
    "numpy>=1.26,<2.0",
    "siphash24>=1.6",
    "magicgui>=0.8.3",
    "magic-class",
    "pyqt5-qt5==5.15.15 ; platform_system != 'Windows'",
    "pyqt5-qt5==5.15.2 ; platform_system == 'Windows'", # 5.15.2 is latest to build on windows, required for uv compatability 2024.12.09
    "napari[all]>=0.4.19",
    "apoc",
    "pyclesperanto-prototype",
    "pyclesperanto",
    "dask",
    "napari-workflows",
    "napari-pyclesperanto-assistant",
    "napari-segment-blobs-and-things-with-membranes",
    "natsort",
    "seaborn",
    "stackview",
    "tifffile>=2023.3.15",
    "scikit-image>=0.18.0",
    "ngff-zarr<0.10.0",
    "bioio>=1.1.0",
    "bioio-ome-tiff>=1",
    "bioio-tifffile>=1",
    "bioio-imageio>=1",
    "bioio-ome-zarr>=1",
    "bioio-nd2>=1",
    "bioio-base>=1.0.4",
    "matplotlib-scalebar>=0.8.1",
]
dynamic = ["version"]

[project.urls]
"Bug Tracker" = "https://github.com/TimMonko/napari-ndev/issues"
"Documentation" = "https://timmonko.github.io/napari-ndev/"
"Source Code" = "https://github.com/TimMonko/napari-ndev"

[project.entry-points."napari.manifest"]
napari-ndev = "napari_ndev:napari.yaml"

[project.scripts]
napari-ndev = "napari.__main__:main"

[project.optional-dependencies]
testing = [
    "pytest",
    "pytest-cov",
    "tox",
    "tox-uv",
    "pytest-qt",
    "napari",
    "pyqt5",
    "bioio-czi >= 1.0.1",
    "napari-ndev[extras]",
]
dev = [
    "ruff",
    "pre-commit",
]
docs = [
    "mkdocs",
    "mkdocs-autorefs",
    "mkdocs-material",
    "mkdocstrings",
    "mkdocstrings-python",
    "mkdocs-jupyter",
    "mkdocs-pdf",
    "mkdocs-spellcheck[all]",
    "mkdocs-literate-nav",
    "mkdocs-table-reader-plugin",
    "black"
]
extras = [
    "napari-simpleitk-image-processing"
]
gpl_extras = [
    "bioio-czi >= 1.0.1",
    "bioio-lif >= 1"
]
all = [
    "napari-ndev[extras]",
    "napari-ndev[gpl_extras]",
]
dev-all = [
    "napari-ndev[dev]",
    "napari-ndev[docs]",
    "napari-ndev[testing]",
]

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"*" = ["*.yaml"]

[tool.setuptools.exclude-package-data]
"*" = [
    "docs/*",
    "_tests/*",
]

[tool.setuptools_scm]
write_to = "src/napari_ndev/_version.py"


[tool.ruff]
line-length = 79
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".mypy_cache",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "*vendored*",
    "*_vendor*",
]
fix = true


[tool.ruff.format]
quote-style = "single"


[tool.ruff.lint]
select = [
    "E", "F", "W", #flake8
    "UP", # pyupgrade
    "I", # isort
    "YTT", #flake8-2020
    "TCH", # flake8-type-checing
    "BLE", # flake8-blind-exception
    "B", # flake8-bugbear
    "A", # flake8-builtins
    "C4", # flake8-comprehensions
    "ISC", # flake8-implicit-str-concat
    "G", # flake8-logging-format
    "PIE", # flake8-pie
    "COM", # flake8-commas
    "SIM", # flake8-simplify
    "INP", # flake8-no-pep420
    "PYI", # flake8-pyi
    "Q", # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "TID",  # flake8-tidy-imports # replace absolutify import
    "TRY", # tryceratops
    "ICN", # flake8-import-conventions
    "RUF", # ruff specific rules
    "NPY201", # checks compatibility with numpy version 2.0
    "ASYNC", # flake8-async
    "EXE", # flake8-executable
    "FA", # flake8-future-annotations
    "LOG", # flake8-logging
    "SLOT", # flake8-slots
    "PT", # flake8-pytest-style
    "T20", # flake8-print
    "D", # docstrings
]
ignore = [
    "E501", "TCH001", "TCH002", "TCH003",
    "A003", # flake8-builtins - we have class attributes violating these rule
    "COM812", # flake8-commas - we don't like adding comma on single line of arguments
    "COM819", # conflicts with ruff-format
    "SIM117", # flake8-simplify - we some of merged with statements are not looking great with black, reanble after drop python 3.9
    "RET504", # not fixed yet https://github.com/charliermarsh/ruff/issues/2950
    "TRY003", # require implement multiple exception class
    "RUF005", # problem with numpy compatybility, see https://github.com/charliermarsh/ruff/issues/2142#issuecomment-1451038741
    "B028", # need to be fixed
    "PYI015", # it produces bad looking files (@jni opinion)
    "W191", "Q000", "Q001", "Q002", "Q003", "ISC001", # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    "D203", "D212" # docstring conflicts, using D203 and D212 instead is more inline with PEP257, but I like D213 bettter
]


[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "single"
multiline-quotes = "double"


[tool.ruff.lint.flake8-tidy-imports]
# Disallow all relative imports.
ban-relative-imports = "all"
banned-module-level-imports = ["pyclesperanto", "pyclesperanto_prototype", "apoc"]


[tool.ruff.lint.isort]
known-first-party=['napari']
combine-as-imports = true


[tool.ruff.lint.flake8-import-conventions]
[tool.ruff.lint.flake8-import-conventions.extend-aliases]
# Declare a custom alias for the `matplotlib` module.
"dask.array" = "da"
xarray = "xr"


[tool.coverage.report]
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
    "raise NotImplementedError()",
    "except ImportError:",
    "pass",
    "^ +\\.\\.\\.$",
]
omit = [
    "src/napari_ndev/_tests/*",
    "docs/*",
]


[tool.pytest.ini_options]
markers = ["notox: mark a test to be excluded from tox"]
